{"version":3,"sources":["api.js","components/Post/index.jsx","components/PostsList/reducer.js","components/PostsList/index.jsx","components/App/index.jsx","reportWebVitals.js","index.js"],"names":["API_URL","getPosts","start","a","limit","url","axios","Post","post","className","animate","title","body","targetRef","useRef","useState","visible","setVisible","onVisibilityChange","useCallback","data","useChangeVisibility","postClassName","cn","show","hide","ref","LOADING_START","LOADING_DONE","LOADING_FAIL","reducer","state","action","type","payload","loading","PostsList","useReducer","total","Infinity","posts","dispatch","loadMorePosts","then","res","headers","catch","err","console","log","handleVisible","directionY","useEffect","href","map","i","id","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2a9c16a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = async (start, limit = 10) => {\n  const url = `${API_URL}/posts?_start=${start}&_limit=${limit}`;\n\n  return axios(url);\n};\n","import React, { useCallback, useRef, useState } from 'react';\nimport { useChangeVisibility } from 'react-visibility-detector';\nimport cn from 'classnames';\n\nimport './index.css';\n\nconst Post = ({ post, className, animate = false }) => {\n  const { title, body } = post;\n  const targetRef = useRef(null);\n  const [visible, setVisible] = useState(false);\n  const onVisibilityChange = useCallback(data => {\n    setVisible(data.visible);\n  }, []);\n\n  useChangeVisibility({\n    targetRef,\n    onVisibilityChange,\n  });\n\n  const postClassName = cn(\n    className,\n    'post',\n    { show: animate && visible },\n    { hide: animate && !visible },\n  );\n\n  return (\n    <div className={postClassName} ref={targetRef}>\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__body\">{body}</p>\n    </div>\n  );\n};\n\nexport default Post;\n","export const LOADING_START = 'LOADING_START';\nexport const LOADING_DONE = 'LOADING_DONE';\nexport const LOADING_FAIL = 'LOADING_FAIL';\n\nexport const reducer = (state, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOADING_START:\n      return { ...state, loading: true };\n\n    case LOADING_DONE:\n      return { ...payload, loading: false };\n\n    case LOADING_FAIL:\n      return { ...state, loading: false };\n\n    default:\n      return state;\n  }\n};\n","import React, { useCallback, useEffect, useReducer } from 'react';\nimport VisibilityDetector from 'react-visibility-detector';\n\nimport { getPosts } from '../../api';\nimport Post from '../Post';\nimport './index.css';\nimport { LOADING_DONE, LOADING_FAIL, LOADING_START, reducer } from './reducer';\n\nconst POSTS_COUNT = 10;\n\nconst PostsList = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    total: Infinity,\n    posts: [],\n    start: 0,\n    loading: false,\n  });\n  const { start, posts, loading, total } = state;\n\n  const loadMorePosts = useCallback(() => {\n    dispatch({ type: LOADING_START });\n\n    getPosts(start, POSTS_COUNT)\n      .then(res => {\n        dispatch({\n          type: LOADING_DONE,\n          payload: {\n            total: +res.headers['x-total-count'],\n            posts: [...posts, ...res.data],\n            start: start + POSTS_COUNT,\n          },\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: LOADING_FAIL });\n      });\n\n  }, [start, posts]);\n\n  const handleVisible = useCallback(({ visible, directionY }) => {\n    if (loading || !visible || directionY !== 'up') return;\n\n    loadMorePosts();\n  }, [loadMorePosts, loading]);\n\n  useEffect(() => {\n    loadMorePosts();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"posts-list\">\n      <h2>Example of implementing a list with data loading by scrolling, and animation when blocks appear on the screen</h2>\n      <p>\n        Data is taken from <a href=\"http://jsonplaceholder.typicode.com\">jsonplaceholder</a>\n        <br/>\n        Loading and animation are implemented using{' '}\n        <a href=\"https://github.com/behuamuh/react-visibility-detector\">\n          react-visibility-detector\n        </a>\n        <br/>\n        The code is available <a href=\"https://github.com/behuamuh/infinity-scroll-example\">here</a>\n      </p>\n      {posts.map((post, i) => (\n        <Post\n          key={post.id}\n          post={post}\n          animate={i % 4 === 0}\n          className=\"posts-list__item\"\n        />\n      ))}\n      {loading && '...loading'}\n      {total > posts.length && <VisibilityDetector onVisibilityChange={handleVisible} />}\n    </div>\n  );\n};\n\nexport default PostsList;\n","import React from 'react';\n\nimport PostsList from '../PostsList';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PostsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}